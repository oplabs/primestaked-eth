@startuml

skinparam tabSize 2
hide footbox

title "Prime Staked resaking process using SSV validators managed by P2P"

actor "Staker" as staker
actor "Operator" as op <<Prime>>
actor "Manager" as man <<Prime>>
participant "API" as api <<P2P>>
actor "Operators" as ssvOp <<SSV>>

box "Execution Chain"
participant "DepositPool" as dp <<Prime>>
participant "Oracle" as oracle <<Prime>>
participant "NodeDelegator" as nd <<Prime>>
participant "SSV Network" as ssvNet <<SSV>>
participant "SSV Token" as ssv <<SSV>>
participant "WETH" as weth <<Wrapped ETH>>
participant "EigenPodManager" as podMan <<EigenLayer>>
participant "EigenPod" as pod <<EigenLayer>>
participant "StrategyManager" as stratMan <<EigenLayer>>
participant "Delayed\nWithdrawal\nRouter" as dwr <<EigenLayer>>
participant "OETH\nStrategy" as oethStrat <<EigenLayer>>
participant "stETH\nStrategy" as stethStrat <<EigenLayer>>
participant "DelegationManager" as delMan <<EigenLayer>>
participant "Slasher" as slasher <<EigenLayer>>
participant "OETH" as oeth <<Origin>>
participant "stETH" as steth <<Lido>>
participant "Deposit" as dep <<Beacon>>
end box

box "Beacon chain"
participant "Validator" as val <<Beacon>>
end box

group Manager setup of EigenPod and SSV Network
man -> nd : createEigenPod()
activate nd
nd -> podMan : createPod()
activate podMan
podMan ->o pod: contructor()
activate pod
return
return
return

man -> nd : approveSSV()
activate nd
nd -> ssv : approve(\nSSV Network,\namount)
activate ssv
note right : NodeDelegator approves\nSSV Network to spend\nSSV tokens
return
' nd -> ssvNet : setFeeRecipientAddress(\nrecipient)
' activate ssvNet
' note right : NodeDelegator set as the fee recipient
' return
return

man -> ssv : transfer(\nfrom\nto\namount)
activate ssv
note right : transfer SSV tokens\nfrom Manager\nto NodeDelegator
return

end group

group User deposits WETH into Prime Staked

staker -> dp : deposit(asset, amount)
activate dp
dp -> weth : transferFrom(\nstaker,\ndepositPool,\namount)
activate weth
note right : WETH transfer\n from staker\nto DepositPool
return
return

end group

group Operator transfers WETH to NodeDelegator

op -> dp : transferAssetToNodeDelegator(\nndcIndex,\nasset\namount)
activate dp
dp -> weth : transfer(\nNodeDelegator,\namount)
activate weth
note right : WETH transfer\nfrom DepositPool\nto Node Delegator
return
return

end group

group Operator creates a new SSV validator

op -> api: POST\neth/staking/ssv/request/create\nuuid,\nvalidatorsCount,\ntype,\nwithdrawalAddress,\nfeeRecipientAddress,\nssvOwnerAddress,\noperationPeriodInDays
activate api
note right
withdrawalAddress is EigenPod
feeRecipientAddress is NodeDelegator
ssvOwnerAddress is NodeDelegator
type is without-encrypt-key
end note
api -> api: private key
note right : generate a validator private key
api -> api: split(key)
note right : splits validator key into multiple KeyShares
return

op -> api: status(uuid)
activate api
return status,\nvalidatorRegistration,\nshareData
note right : validatorRegistration contains the pubkey, operatorIds and cluster details

op -> nd : registerSsvValidator(\npublicKey,\noperatorIds,\nsharesData,\namount,\ncluster)
activate nd
note right
cluster data:
The number of validators in the cluster
The index of network fees related to this cluster
The last index calculated for the cluster
Flag indicating whether the cluster is active
The SSV balance of the cluster
end note
nd -> ssvNet : registerValidator(\npublicKey,\noperatorIds,\nsharesData,\namount,\ncluster)
activate ssvNet
ssvNet -> ssv : transferFrom(\nfrom\nto\namount)
activate ssv
note right: transfer SSV tokens\nfrom NodeDelegator\nto SSV Network
return
return
return

op -> dp : transferAssetToNodeDelegator(\nndcIndex,\nasset\namount)
activate dp
note right : WETH transfer\nfrom DepositPool\nto Node Delegator
return

' op -> nd : stakeEth(\npubkey,\nsignature,\ndepositDataRoot)
' activate nd
' nd -> weth : withdraw(\namount)
' activate weth
' note right : WETH burned for ETH
' return ETH
' nd -> podMan : stake(\npayableAmount\npubkey,\nsignature,\ndepositDataRoot)
' note right : 32 ETH from NodeDelegator\nis sent to EigenPodManager
' activate podMan
' podMan -> pod : stake(\npubkey,\nsignature,\ndepositDataRoot)
' activate pod
' pod -> dep : stake(\npubkey,\nwithdrawal_credentials,\nsignature,\ndepositDataRoot)
' activate dep
' return
' return
' return
' return

op -> nd : stakeEth(\n[pubkey,\nsignature,\ndepositDataRoot])
activate nd
nd -> weth : withdraw(\namount)
activate weth
note right : WETH burned for ETH
return ETH

loop For each validator

nd -> podMan : stake(\npayableAmount\npubkey,\nsignature,\ndepositDataRoot)
note right : 32 ETH from NodeDelegator\nis sent to EigenPodManager
activate podMan
podMan -> pod : stake(\npubkey,\nsignature,\ndepositDataRoot)
activate pod
note right : 32 ETH from EigenPodManager\nis sent to EigenPod
pod -> dep : stake(\npubkey,\nwithdrawal_credentials,\nsignature,\ndepositDataRoot)
activate dep
note right : 32 ETH from EigenPod\nis sent to Beacon Deposit
return
return
return

end loop
return

end group

' group Manager adds another validator

' man -> api: POST nodes-request/create\nuuid,\ntype,\nnodesOptions,\neigenPodOwnerAddress,\ncontrollerAddress,\nfeeRecipientAddress
' activate api
' note right : eigenPodOwnerAddress is the NodeDelegator
' return

' man -> api: status(uuid)
' activate api
' return status,\neigenPodAddress,\npubkey,\nsignature,\ndepositDataRoot,\nwithdrawalCredentials,\ndepositMessageRoot

' end group


group Manager deposits more SSV to SSV cluster

man -> ssv : transfer(\nto\namount)
activate ssv
note right : transfer SSV tokens\nfrom Manager\nto NodeDelegator
return

man -> nd : depositSSV(\noperatorIds,\namount,\ncluster)
activate nd
note right : cluster is latest cluster data. eg balance
nd -> ssvNet : deposit(\nclusterOwner,\noperatorIds,\namount,\ncluster)
activate ssvNet
note right : clusterOwner is NodeDelegator
ssvNet -> ssv : transferFrom(\nfrom\nto\namount)
activate ssv
note right: transfer SSV tokens\nfrom DelegatorNode\nto SSV Network
return
return
return
end group


group Operator verifies validator

op -> val : get Beacon state
activate val
return state

op -> val : get Beacon block
activate val
return block

op -> val : get Beacon block header
activate val
return block header

op -> op : generate(\nstate,\nblock,\nblock header)
activate op
note right : generate proofs using EigenPod Proofs Generator tool
return proofs, validatorFields

op -> nd : verifyWithdrawalCredentials(\noracleTimestamp,\nvalidatorIndices\nwithdrawalCredentialProofs,\nstateRootProof,\nvalidatorFields)
activate nd
nd -> pod : verifyWithdrawalCredentials(\noracleTimestamp,\nvalidatorIndices\nwithdrawalCredentialProofs,\nstateRootProof,\nvalidatorFields)
activate pod
note right
verify validator's balance is >= 32 ETH
and withdrawal credentials point to EigenPod
end note
pod -> podMan : recordBeaconChainETHBalanceUpdate(\npodOwner,\namount)
activate podMan
note right : add to NodeDelegator's pod shares
podMan -> delMan : increaseDelegatedShares(\nstaker,\nstrategy,\namount)
activate delMan
note right : add to NodeDelegator's delegated shares
return
return
return
return
end group

group Operator withdraws consensus rewards

val -> pod : ETH
note left : Beacon chain partial withdraw\nof excess ETH every 8-10 days\nfrom validator to EigenPod

op -> nd : initiateWithdrawRewards()
activate nd
note right : withdraw all ETH in the EigenPod
nd -> pod : withdrawBeforeRestaking()
activate pod
pod -> dwr : ETH
note right : transfers ETH\nfrom EigenPod\nto Delayed Withdrawal Router
return
return

... 7 days ...

op -> nd : claimRewards(maxClaims)
activate nd
nd -> dwr : claimDelayedWithdrawals(nodeDelegator, maxClaims)
activate dwr
dwr -> nd : ETH
note right : transfers ETH\nfrom Delayed Withdrawal Router\nto NodeDelegator
return
return

end group

group Operator full withdraw from validator

op -> nd : exitSsvValidator(\npublicKey\noperatorIds)
activate nd
nd -> ssvNet : exitValidator(\npublicKey\noperatorIds)
activate ssvNet
return
return

ssvOp -> ssvOp : sign(\npk,\nexit message)
note right : voluntary exit message signed by the validator private key
ssvOp -> val : signed voluntary exit message
activate val
return

... wait until validator has exited.\nmin four epochs (~25 min), currently 1.5 hours but can take a number of days depending on the number of validators in the exit queue ...

op -> nd : removeSsvValidator(\npublicKey,\noperatorIds,\ncluster)
activate nd
nd -> ssvNet : removeValidator(\npublicKey\noperatorIds,\ncluster)
activate ssvNet
note right : stop paying SSV to Operators\n and reduce required SSV collateral
return
return

... wait for the validator to be swept on the Beacon chain\ncurrent time is every 8.5 days ...

val -> pod : ETH
note left : transfer staked ETH and rewards\nfrom Beacon Deposit\nto EigenPod

op -> nd : initiateWithdrawRewards()
activate nd
note right : withdraw all ETH in the EigenPod
nd -> pod : withdrawBeforeRestaking()
activate pod
pod -> dwr : ETH
note right : transfers ETH\nfrom EigenPod\nto Delayed Withdrawal Router
return
return

... 7 days ...

op -> nd : claimRewards(maxClaims)
activate nd
nd -> dwr : claimDelayedWithdrawals(nodeDelegator, maxClaims)
activate dwr
dwr -> nd : ETH
note right : transfers ETH\nfrom Delayed Withdrawal Router\nto NodeDelegator
return
return

end group

group User deposits OETH into Prime Staked

staker -> dp : deposit(asset, amount)
activate dp
dp -> oeth : transferFrom(\nstaker,\ndepositPool,\namount)
activate oeth
note left : OETH transfer\nfrom staker\nto DepositPool
return
return

end group

group Operator transfers OETH to NodeDelegator

op -> dp : transferAssetToNodeDelegator(\nndcIndex,\nasset\namount)
activate dp
dp -> oeth : transfer(\nNodeDelegator,\namount)
note left : OETH transfer\nfrom DepositPool\nto NodeDelegator
return
return

end group

group Operator deposits OETH to EigenLayer

op -> nd : depositAssetIntoStrategy(\nasset)
activate nd
nd -> stratMan : depositIntoStrategy(\nstrategy,\nasset,\namount)
activate stratMan
stratMan -> oeth : transferFrom(\nNodeDelegator,\nstrategy,\namount)
activate oeth
return
stratMan -> oethStrat : deposit(\nasset,\namount)
activate oethStrat
return shares
stratMan -> delMan : increaseDelegatedShares(\nstaker,\nstrategy,\nshares)
activate delMan
return
return shares
return

end group

group Staker withdraws OETH

staker -> dp : requestWithdraw(\nasset,\namount)
activate dp
dp -> nd : requestWithdraw(\nasset,\namount,\nstaker)
activate nd
nd -> stratMan : underlyingsToShares(\namount)
activate stratMan
return shares
nd -> stratMan : queueWithdrawal(\nstrategyIndexes[],\nstrategies[],\nshares[],\nstaker,\nundelegateIfPossible)
activate stratMan
stratMan -> delMan : decreaseDelegatedShares(\nstaker,\n[strategies],\n[shares])
activate delMan
return
return withdrawalRoot

nd -> nd : store(withdrawalRoot, staker)
note right : map the withdrawalRoot to the staker

return withdrawalRoot
return withdrawalRoot

... 7 days ...

staker -> dp : claimWithdraw(\nwithdrawalRoot)
activate dp
dp -> nd : claimWithdraw(\nwithdrawalRoot,\nstaker)
activate nd

nd -> nd : validateStaker(\nwithdrawalRoot,\nstaker)
note right : validate against map of withdrawalRoot to staker

nd -> stratMan : completeQueuedWithdrawal(\nqueuedWithdrawal,\ntokens[],\nmiddlewareTimesIndex,\nreceiveAsTokens)
activate stratMan
stratMan -> slasher : canWithdraw(\noperator,\nwithdrawalStartBlock,\nmiddlewareTimesIndex)
activate slasher
return true
stratMan -> oethStrat : withdraw(\ndepositor,\ntoken,\namountShares)
activate oethStrat
oethStrat -> oeth : transfer(\nNodeDelegator,\namount)
activate oeth
note left : transfer OETH\nfrom OETH Strategy\nto NodeDelegator
return
return
return

nd -> oeth : transfer(\nstaker,\namount)
activate oeth
note left : transfer OETH\nfrom NodeDelegator\nto staker
return

return
return

end group


group Operator withdraws stETH from EigenLayer

op -> nd : requestWithdraw(\nasset,\namount)
activate nd
nd -> stratMan : underlyingsToShares(\namount)
activate stratMan
return shares
nd -> stratMan : queueWithdrawal(\nstrategyIndexes[],\nstrategies[],\nshares[],\nstaker,\nundelegateIfPossible)
activate stratMan
stratMan -> delMan : decreaseDelegatedShares(\nstaker,\n[strategies],\n[shares])
activate delMan
return
return withdrawalRoot

nd -> nd : store(withdrawalRoot, operator)
note right : map the withdrawalRoot to the staker

return withdrawalRoot

... 7 days ...

op -> nd : claimWithdraw(\nwithdrawalRoot)
activate nd

nd -> nd : validateStaker(\nwithdrawalRoot,\noperator)
note right : validate against map of withdrawalRoot to operator

nd -> stratMan : completeQueuedWithdrawal(\nqueuedWithdrawal,\ntokens[],\nmiddlewareTimesIndex,\nreceiveAsTokens)
activate stratMan
stratMan -> slasher : canWithdraw(\noperator,\nwithdrawalStartBlock,\nmiddlewareTimesIndex)
activate slasher
return true
stratMan -> stethStrat : withdraw(\ndepositor,\ntoken,\namountShares)
activate stethStrat
stethStrat -> steth : transfer(\nNodeDelegator,\namount)
activate steth
note left : transfer stETH\nfrom stETH Strategy\nto NodeDelegator
return
return
return
return

end group

group Manager transfers stETH to the Deposit Pool

man -> nd : transferBackToLRTDepositPool(\nasset,\namount)
activate nd
nd -> steth : transfer(\nDepositPool,\namount)
activate steth
return
return

end group

group Manager swaps their WETH for stETH in the Deposit Pool

man -> dp : swapAssetWithinDepositPool(\nfromAsset,\ntoAsset,\nfromAssetAmount,\nminToAssetAmount)
activate dp
note right
fromAsset is WETH
toAsset is stETH
end note

dp -> oracle : getAssetPrice(\nfromAsset)
activate oracle
return fromAssetPrice

dp -> oracle : getAssetPrice(\ntoAsset)
activate oracle
return toAssetPrice

dp -> dp : calcToAssetAmount
note right : fromAssetPrice * fromAssetAmount / toAssetPrice

dp -> weth : transferFrom(\nManager,\nDepositPool,\nfromAssetAmount)
activate weth
note left : transfer WETH\nfrom Manager\nto DepositPool
return

dp -> steth : transfer(\nManager,\ntoAssetAmount)
activate steth
note left : transfer stETH\nfrom DepositPool\nto Manager
return

return

end group

@enduml