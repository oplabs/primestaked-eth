@startuml

skinparam tabSize 2

title "Prime Staked Native ETH Restaking Process"

actor "Staker" as staker
actor "Operator" as op
actor "Manager" as man
participant "API" as api <<P2P>>

box "Blockahin"
participant "DepositPool" as dp <<Prime>>
participant "NodeDelegator" as nd <<Prime>>
participant "EigenPodManager" as podMan <<EigenLayer>>
participant "EigenPod" as pod <<EigenLayer>>
participant "DepositContract" as dep <<Beacon>>
end box

group Manager setup of EigenPod and validator
man -> nd : createEigenPod()
activate nd
nd -> podMan : createPod()
activate podMan
podMan ->o pod: contructor()
activate pod
return
return
return

man -> api: POST nodes-request/create\nuuid,\ntype,\nnodesOptions,\neigenPodOwnerAddress,\ncontrollerAddress,\nfeeRecipientAddress
activate api
note right : eigenPodOwnerAddress is the NodeDelegator
return

man -> api: status(uuid)
activate api
return status,\neigenPodAddress,\npubkey,\nsignature,\ndepositDataRoot,\nwithdrawalCredentials,\ndepositMessageRoot

end group

group User deposit into Prime Staked

staker -> dp : depositETH(\npayableAmount)
note right : ETH from staker\nis sent to DepositPool
activate dp
return

end group


' group Manager adds another validator

' man -> api: POST nodes-request/create\nuuid,\ntype,\nnodesOptions,\neigenPodOwnerAddress,\ncontrollerAddress,\nfeeRecipientAddress
' activate api
' note right : eigenPodOwnerAddress is the NodeDelegator
' return

' man -> api: status(uuid)
' activate api
' return status,\neigenPodAddress,\npubkey,\nsignature,\ndepositDataRoot,\nwithdrawalCredentials,\ndepositMessageRoot

' end group

group Operator Stakes 32 ETH to new validator

op -> dp : transferETHToNodeDelegator(\nndcIndex,\namount)
activate dp
dp -> nd : sendETHFromDepositPoolToNDC()
note right : ETH from DepositPool\nis sent to NodeDelegator
activate nd
return
return


op -> nd : stakeEth(\npubkey,\nsignature,\ndepositDataRoot)
activate nd
nd -> podMan : stake(\npayableAmount\npubkey,\nsignature,\ndepositDataRoot)
note right : 32 ETH from NodeDelegator\nis sent to EigenPodManager
activate podMan
podMan -> pod : stake(\npubkey,\nsignature,\ndepositDataRoot)
activate pod
pod -> dep : stake(\npubkey,\nsignature,\ndepositDataRoot)
activate dep
return
return
return
return
' man -> dep : deposit(\npubkey,\nsignature,\ndeposit_data_root)
' activate dep
' return

end group

@enduml
