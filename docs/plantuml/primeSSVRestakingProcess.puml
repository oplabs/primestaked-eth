@startuml

skinparam tabSize 2

title "Prime Staked resaking process using SSV validators managed by P2P"

actor "Staker" as staker
actor "Operator" as op
actor "Manager" as man
participant "API" as api <<P2P>>

box "Blockahin"
participant "DepositPool" as dp <<Prime>>
participant "NodeDelegator" as nd <<Prime>>
participant "SSV Network" as ssvNet <<SSV>>
participant "SSV Token" as ssv <<SSV>>
participant "WETH" as weth <<Wrapped ETH>>
participant "EigenPodManager" as podMan <<EigenLayer>>
participant "EigenPod" as pod <<EigenLayer>>
participant "DepositContract" as dep <<Beacon>>
end box

group Manager setup of EigenPod and SSV Network
man -> nd : createEigenPod()
activate nd
nd -> podMan : createPod()
activate podMan
podMan ->o pod: contructor()
activate pod
return
return
return

man -> nd : approveSSV()
activate nd
nd -> ssv : approve(\nSSV Network,\namount)
activate ssv
note right : NodeDelegator approves\nSSV Network to spend\nSSV tokens
return
nd -> ssvNet : setFeeRecipientAddress(\nrecipient)
activate ssvNet
note right : NodeDelegator set as the fee recipient
return
return

end

group Operator creates new SSV validators

op -> api: POST\neth/staking/ssv/request/create\nuuid,\nvalidatorsCount,\ntype,\nwithdrawalAddress,\nfeeRecipientAddress,\nssvOwnerAddress,\noperationPeriodInDays
activate api
note right
withdrawalAddress is EigenPod
feeRecipientAddress is NodeDelegator
ssvOwnerAddress is NodeDelegator
type is without-encrypt-key
end note
return

op -> api: status(uuid)
activate api
return status,\ndepositData[],\nvalidatorRegistration[],\nshareData[]

op -> nd : bulkRegisterValidator(\npublicKeys,\noperatorIds,\nsharesData,\namount,\ncluster)
activate nd
nd -> ssvNet : bulkRegisterValidator(\npublicKeys,\noperatorIds,\nsharesData,\namount,\ncluster)
activate ssvNet
' note right : any account can register
ssvNet -> ssv : transferFrom(\nfrom\nto\namount)
activate ssv
note right: transfer SSV tokens\nfrom NodeDelegator\nto SSV Network
return
return
return

end group

group User deposits WETH into Prime Staked

staker -> dp : deposit(asset, amount)
note right : WETH from staker\nis transferred to DepositPool
activate dp
return

end group

group Operator Stakes 32 ETH to new validator

op -> dp : transferAssetToNodeDelegator(\nndcIndex,\nasset\namount)
activate dp
note right : WETH transfer\nfrom DepositPool\nto Node Delegator
return


op -> nd : bulkStakeEth(\n[pubkey,\nsignature,\ndepositDataRoot])
activate nd
nd -> weth : withdraw(\namount)
activate weth
note right : WETH burned for ETH
return ETH

loop For each validator

nd -> podMan : stake(\npayableAmount\npubkey,\nsignature,\ndepositDataRoot)
note right : 32 ETH from NodeDelegator\nis sent to EigenPodManager
activate podMan
podMan -> pod : stake(\npubkey,\nsignature,\ndepositDataRoot)
activate pod
pod -> dep : stake(\npubkey,\nwithdrawal_credentials,\nsignature,\ndepositDataRoot)
activate dep
return
return
return

end loop

return
' man -> dep : deposit(\npubkey,\nsignature,\ndeposit_data_root)
' activate dep
' return
end group

' group Manager adds another validator

' man -> api: POST nodes-request/create\nuuid,\ntype,\nnodesOptions,\neigenPodOwnerAddress,\ncontrollerAddress,\nfeeRecipientAddress
' activate api
' note right : eigenPodOwnerAddress is the NodeDelegator
' return

' man -> api: status(uuid)
' activate api
' return status,\neigenPodAddress,\npubkey,\nsignature,\ndepositDataRoot,\nwithdrawalCredentials,\ndepositMessageRoot

' end group

@enduml
